; Problem description
; This file describes the example input from the problem statement
(define (problem pb1)
  (:metric minimize (total-cost))
  (:domain CS170)
(:objects TA_XB TA_XC TA_XD TA_XE TA_XF TA_XH TA_XI TA_XJ TA_XL TA_XM TA_XN TA_XO XA XB XC XD XE XF XG XH XI XJ XK XL XM XN XO )
(:init(= (total-cost) 0)
( Car_At XA )
(InCar TA_XB)
(InCar TA_XC)
(InCar TA_XD)
(InCar TA_XE)
(InCar TA_XF)
(InCar TA_XH)
(InCar TA_XI)
(InCar TA_XJ)
(InCar TA_XL)
(InCar TA_XM)
(InCar TA_XN)
(InCar TA_XO)
(Path XA XE )
(Path XE XA )
(= (Distance XA XE )2)
(= (Distance XE XA )2)

(Path XA XF )
(Path XF XA )
(= (Distance XA XF )4)
(= (Distance XF XA )4)

(Path XB XF )
(Path XF XB )
(= (Distance XB XF )3)
(= (Distance XF XB )3)

(Path XB XK )
(Path XK XB )
(= (Distance XB XK )6)
(= (Distance XK XB )6)

(Path XC XG )
(Path XG XC )
(= (Distance XC XG )5)
(= (Distance XG XC )5)

(Path XC XJ )
(Path XJ XC )
(= (Distance XC XJ )6)
(= (Distance XJ XC )6)

(Path XD XG )
(Path XG XD )
(= (Distance XD XG )3)
(= (Distance XG XD )3)

(Path XE XJ )
(Path XJ XE )
(= (Distance XE XJ )7)
(= (Distance XJ XE )7)

(Path XF XI )
(Path XI XF )
(= (Distance XF XI )3)
(= (Distance XI XF )3)

(Path XG XH )
(Path XH XG )
(= (Distance XG XH )1)
(= (Distance XH XG )1)

(Path XG XL )
(Path XL XG )
(= (Distance XG XL )2)
(= (Distance XL XG )2)

(Path XH XJ )
(Path XJ XH )
(= (Distance XH XJ )5)
(= (Distance XJ XH )5)

(Path XI XM )
(Path XM XI )
(= (Distance XI XM )4)
(= (Distance XM XI )4)

(Path XJ XM )
(Path XM XJ )
(= (Distance XJ XM )2)
(= (Distance XM XJ )2)

(Path XK XL )
(Path XL XK )
(= (Distance XK XL )2)
(= (Distance XL XK )2)

(Path XK XN )
(Path XN XK )
(= (Distance XK XN )3)
(= (Distance XN XK )3)

(Path XL XO )
(Path XO XL )
(= (Distance XL XO )1)
(= (Distance XO XL )1)

(Path XM XN )
(Path XN XM )
(= (Distance XM XN )2)
(= (Distance XN XM )2)

(Path XN XO )
(Path XO XN )
(= (Distance XN XO )1)
(= (Distance XO XN )1)

(EmptyHome XB)
(EmptyHome XC)
(EmptyHome XD)
(EmptyHome XE)
(EmptyHome XF)
(EmptyHome XH)
(EmptyHome XI)
(EmptyHome XJ)
(EmptyHome XL)
(EmptyHome XM)
(EmptyHome XN)
(EmptyHome XO)
)

  ; The goal state describe what we desire to achieve
  (:goal (and
( Car_At XA )
(not (EmptyHome XB))
(not (EmptyHome XC))
(not (EmptyHome XD))
(not (EmptyHome XE))
(not (EmptyHome XF))
(not (EmptyHome XH))
(not (EmptyHome XI))
(not (EmptyHome XJ))
(not (EmptyHome XL))
(not (EmptyHome XM))
(not (EmptyHome XN))
(not (EmptyHome XO))
  ))
)