; Problem description
; This file describes the example input from the problem statement
(define (problem pb1)
  (:metric minimize (total-cost))
  (:domain CS170)
(:objects TA_XA TA_XG TA_XH TA_XI TA_XJ TA_XL TA_XK TA_XN TA_XM TA_XO TA_XP TA_XQ TA_XR XA XB XC XD XE XF XG XH XI XJ XK XL XM XN XO XP XQ XR )
(:init(= (total-cost) 0)
( Car_At XA )
(InCar TA_XA)
(InCar TA_XG)
(InCar TA_XH)
(InCar TA_XI)
(InCar TA_XJ)
(InCar TA_XL)
(InCar TA_XK)
(InCar TA_XN)
(InCar TA_XM)
(InCar TA_XO)
(InCar TA_XP)
(InCar TA_XQ)
(InCar TA_XR)
(Path XA XB )
(Path XB XA )
(= (Distance XA XB )1)
(= (Distance XB XA )1)

(Path XA XF )
(Path XF XA )
(= (Distance XA XF )1)
(= (Distance XF XA )1)

(Path XA XQ )
(Path XQ XA )
(= (Distance XA XQ )1)
(= (Distance XQ XA )1)

(Path XA XR )
(Path XR XA )
(= (Distance XA XR )1)
(= (Distance XR XA )1)

(Path XB XC )
(Path XC XB )
(= (Distance XB XC )1)
(= (Distance XC XB )1)

(Path XB XG )
(Path XG XB )
(= (Distance XB XG )1)
(= (Distance XG XB )1)

(Path XB XH )
(Path XH XB )
(= (Distance XB XH )1)
(= (Distance XH XB )1)

(Path XC XD )
(Path XD XC )
(= (Distance XC XD )1)
(= (Distance XD XC )1)

(Path XC XI )
(Path XI XC )
(= (Distance XC XI )1)
(= (Distance XI XC )1)

(Path XC XJ )
(Path XJ XC )
(= (Distance XC XJ )1)
(= (Distance XJ XC )1)

(Path XD XE )
(Path XE XD )
(= (Distance XD XE )1)
(= (Distance XE XD )1)

(Path XD XK )
(Path XK XD )
(= (Distance XD XK )1)
(= (Distance XK XD )1)

(Path XD XL )
(Path XL XD )
(= (Distance XD XL )1)
(= (Distance XL XD )1)

(Path XE XF )
(Path XF XE )
(= (Distance XE XF )1)
(= (Distance XF XE )1)

(Path XE XM )
(Path XM XE )
(= (Distance XE XM )1)
(= (Distance XM XE )1)

(Path XE XN )
(Path XN XE )
(= (Distance XE XN )1)
(= (Distance XN XE )1)

(Path XF XO )
(Path XO XF )
(= (Distance XF XO )1)
(= (Distance XO XF )1)

(Path XF XP )
(Path XP XF )
(= (Distance XF XP )1)
(= (Distance XP XF )1)

(EmptyHome XA)
(EmptyHome XG)
(EmptyHome XH)
(EmptyHome XI)
(EmptyHome XJ)
(EmptyHome XL)
(EmptyHome XK)
(EmptyHome XN)
(EmptyHome XM)
(EmptyHome XO)
(EmptyHome XP)
(EmptyHome XQ)
(EmptyHome XR)
)

  ; The goal state describe what we desire to achieve
  (:goal (and
( Car_At XA )
(not (EmptyHome XA))
(not (EmptyHome XG))
(not (EmptyHome XH))
(not (EmptyHome XI))
(not (EmptyHome XJ))
(not (EmptyHome XL))
(not (EmptyHome XK))
(not (EmptyHome XN))
(not (EmptyHome XM))
(not (EmptyHome XO))
(not (EmptyHome XP))
(not (EmptyHome XQ))
(not (EmptyHome XR))
  ))
)