; Problem description
; This file describes the example input from the problem statement
(define (problem pb1)
  (:metric minimize (total-cost))
  (:domain CS170)
(:objects TA_XE TA_XH TA_XK TA_XN TA_XQ TA_XU TA_XW XA XB XC XD XE XF XG XH XI XJ XK XL XM XN XO XP XQ XR XS XT XU XV XW )
(:init(= (total-cost) 0)
( Car_At XA )
(InCar TA_XE)
(InCar TA_XH)
(InCar TA_XK)
(InCar TA_XN)
(InCar TA_XQ)
(InCar TA_XU)
(InCar TA_XW)
(Path XA XB )
(Path XB XA )
(= (Distance XA XB )1)
(= (Distance XB XA )1)

(Path XB XC )
(Path XC XB )
(= (Distance XB XC )5)
(= (Distance XC XB )5)

(Path XB XD )
(Path XD XB )
(= (Distance XB XD )1)
(= (Distance XD XB )1)

(Path XC XE )
(Path XE XC )
(= (Distance XC XE )1)
(= (Distance XE XC )1)

(Path XD XE )
(Path XE XD )
(= (Distance XD XE )7)
(= (Distance XE XD )7)

(Path XE XF )
(Path XF XE )
(= (Distance XE XF )5)
(= (Distance XF XE )5)

(Path XE XG )
(Path XG XE )
(= (Distance XE XG )1)
(= (Distance XG XE )1)

(Path XF XH )
(Path XH XF )
(= (Distance XF XH )1)
(= (Distance XH XF )1)

(Path XG XH )
(Path XH XG )
(= (Distance XG XH )7)
(= (Distance XH XG )7)

(Path XH XI )
(Path XI XH )
(= (Distance XH XI )5)
(= (Distance XI XH )5)

(Path XH XJ )
(Path XJ XH )
(= (Distance XH XJ )1)
(= (Distance XJ XH )1)

(Path XI XK )
(Path XK XI )
(= (Distance XI XK )1)
(= (Distance XK XI )1)

(Path XJ XK )
(Path XK XJ )
(= (Distance XJ XK )7)
(= (Distance XK XJ )7)

(Path XK XL )
(Path XL XK )
(= (Distance XK XL )5)
(= (Distance XL XK )5)

(Path XK XM )
(Path XM XK )
(= (Distance XK XM )1)
(= (Distance XM XK )1)

(Path XL XN )
(Path XN XL )
(= (Distance XL XN )1)
(= (Distance XN XL )1)

(Path XM XN )
(Path XN XM )
(= (Distance XM XN )7)
(= (Distance XN XM )7)

(Path XN XO )
(Path XO XN )
(= (Distance XN XO )5)
(= (Distance XO XN )5)

(Path XN XP )
(Path XP XN )
(= (Distance XN XP )1)
(= (Distance XP XN )1)

(Path XO XQ )
(Path XQ XO )
(= (Distance XO XQ )1)
(= (Distance XQ XO )1)

(Path XP XQ )
(Path XQ XP )
(= (Distance XP XQ )7)
(= (Distance XQ XP )7)

(Path XQ XR )
(Path XR XQ )
(= (Distance XQ XR )1)
(= (Distance XR XQ )1)

(Path XR XS )
(Path XS XR )
(= (Distance XR XS )1)
(= (Distance XS XR )1)

(Path XR XW )
(Path XW XR )
(= (Distance XR XW )3)
(= (Distance XW XR )3)

(Path XS XT )
(Path XT XS )
(= (Distance XS XT )1)
(= (Distance XT XS )1)

(Path XT XU )
(Path XU XT )
(= (Distance XT XU )1)
(= (Distance XU XT )1)

(Path XU XV )
(Path XV XU )
(= (Distance XU XV )3)
(= (Distance XV XU )3)

(Path XV XW )
(Path XW XV )
(= (Distance XV XW )2)
(= (Distance XW XV )2)

(EmptyHome XE)
(EmptyHome XH)
(EmptyHome XK)
(EmptyHome XN)
(EmptyHome XQ)
(EmptyHome XU)
(EmptyHome XW)
)

  ; The goal state describe what we desire to achieve
  (:goal (and
( Car_At XA )
(not (EmptyHome XE))
(not (EmptyHome XH))
(not (EmptyHome XK))
(not (EmptyHome XN))
(not (EmptyHome XQ))
(not (EmptyHome XU))
(not (EmptyHome XW))
  ))
)